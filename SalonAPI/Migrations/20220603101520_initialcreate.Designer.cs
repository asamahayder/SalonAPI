// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalonAPI.Data;

#nullable disable

namespace SalonAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220603101520_initialcreate")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmployeeService", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("EmployeesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("EmployeeService");
                });

            modelBuilder.Entity("SalonAPI.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookedById")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SalonAPI.Models.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FridayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FridayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FridayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MondayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MondayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MondayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaturdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SaturdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaturdayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SundayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SundayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SundayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThursdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ThursdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThursdayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TuesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TuesdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TuesdayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WednessdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WednessdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WednessdayStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("SalonAPI.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SalonId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SalonAPI.Models.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Door")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Suit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Salons");
                });

            modelBuilder.Entity("SalonAPI.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PauseEndInMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("PauseStartInMinutes")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SalonAPI.Models.SpecialOpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FridayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FridayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FridayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MondayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MondayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MondayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaturdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SaturdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaturdayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SundayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SundayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SundayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ThursdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ThursdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ThursdayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TuesdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TuesdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TuesdayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WednessdayEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WednessdayOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WednessdayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Week")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SpecialOpeningHours");
                });

            modelBuilder.Entity("SalonAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SalonAPI.Models.Admin", b =>
                {
                    b.HasBaseType("SalonAPI.Models.User");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SalonAPI.Models.Customer", b =>
                {
                    b.HasBaseType("SalonAPI.Models.User");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SalonAPI.Models.Employee", b =>
                {
                    b.HasBaseType("SalonAPI.Models.User");

                    b.Property<int?>("SalonId")
                        .HasColumnType("int");

                    b.HasIndex("SalonId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SalonAPI.Models.Owner", b =>
                {
                    b.HasBaseType("SalonAPI.Models.User");

                    b.Property<string>("SalonChainName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("EmployeeService", b =>
                {
                    b.HasOne("SalonAPI.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalonAPI.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonAPI.Models.Booking", b =>
                {
                    b.HasOne("SalonAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("BookedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalonAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalonAPI.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalonAPI.Models.OpeningHours", b =>
                {
                    b.HasOne("SalonAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SalonAPI.Models.Request", b =>
                {
                    b.HasOne("SalonAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalonAPI.Models.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SalonAPI.Models.Salon", b =>
                {
                    b.HasOne("SalonAPI.Models.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SalonAPI.Models.Service", b =>
                {
                    b.HasOne("SalonAPI.Models.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SalonAPI.Models.SpecialOpeningHours", b =>
                {
                    b.HasOne("SalonAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SalonAPI.Models.Admin", b =>
                {
                    b.HasOne("SalonAPI.Models.User", null)
                        .WithOne()
                        .HasForeignKey("SalonAPI.Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonAPI.Models.Customer", b =>
                {
                    b.HasOne("SalonAPI.Models.User", null)
                        .WithOne()
                        .HasForeignKey("SalonAPI.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonAPI.Models.Employee", b =>
                {
                    b.HasOne("SalonAPI.Models.User", null)
                        .WithOne()
                        .HasForeignKey("SalonAPI.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SalonAPI.Models.Salon", "Salon")
                        .WithMany("Employees")
                        .HasForeignKey("SalonId");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SalonAPI.Models.Owner", b =>
                {
                    b.HasOne("SalonAPI.Models.User", null)
                        .WithOne()
                        .HasForeignKey("SalonAPI.Models.Owner", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonAPI.Models.Salon", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
